note
	description: "Input Handler"
	author: ""
	date: "$Date$"
	revision: "$Revision$"

deferred class
	ETF_INPUT_HANDLER_INTERFACE
inherit
	ETF_TYPE_CONSTRAINTS

feature {NONE}

	make_without_running(input: STRING; a_commands: ETF_ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		create on_error
		  	input_string := input
		  	abstract_ui  := a_commands
	  	end

	make(input: STRING; a_commands: ETF_ABSTRACT_UI_INTERFACE)
			-- convert an input string into array of commands
	  	do
	  		make_without_running(input, a_commands)
			parse_and_validate_input_string
	  	end

feature -- auxiliary queries

	etf_evt_out (evt: TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]): STRING
		local
			i: INTEGER
			name: STRING
			args: ARRAY[ETF_EVT_ARG]
		do
			name := evt.name
			args := evt.args
			create Result.make_empty
			Result.append (name + "(")
			from
				i := args.lower
			until
				i > args.upper
			loop
				if args[i].src_out.is_empty then
					Result.append (args[i].out)
				else
					Result.append (args[i].src_out)
				end
				if i < args.upper then
					Result.append (", ")
				end
				i := i + 1
			end
			Result.append (")")
		end

feature -- attributes

	error: BOOLEAN

	input_string: STRING -- list of commands to execute

	abstract_ui: ETF_ABSTRACT_UI_INTERFACE
		-- output generated by `parse_string'

feature -- error reporting

	on_error: ETF_EVENT [TUPLE[STRING]]

feature -- error messages

	input_cmds_syntax_err_msg : STRING =
		"Syntax Error: specification of command executions cannot be parsed"

	input_cmds_type_err_msg : STRING =
		"Type Error: specification of command executions is not type-correct"

feature -- parsing

	parse_and_validate_input_string
	  local
		trace_parser : ETF_EVT_TRACE_PARSER
		cmd : ETF_COMMAND_INTERFACE
		invalid_cmds: STRING
	  do
		create trace_parser.make (enum_items)
		trace_parser.parse_string (input_string)

	    if NOT trace_parser.syntax_error then
	  	  invalid_cmds := find_invalid_evt_trace (
		    	trace_parser.event_trace)
		  if invalid_cmds.is_empty then
		    across trace_parser.event_trace
		    as evt
		    loop
		      cmd := evt_to_cmd (evt.item)
		      abstract_ui.put (cmd)
		    end
		  else
		    error := TRUE
		    on_error.notify (
		  	  input_cmds_type_err_msg + "%N" + invalid_cmds)
		  end
	    else
	      error := TRUE
	      on_error.notify (
		    input_cmds_syntax_err_msg + "%N At token " + trace_parser.last_error)
	    end
	end

	evt_to_cmd (evt : TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]) : ETF_COMMAND_INTERFACE
		local
			cmd_name : STRING
			args : ARRAY[ETF_EVT_ARG]
			dummy_cmd : ETF_DUMMY
		do
			cmd_name := evt.name
			args := evt.args
			create dummy_cmd.make("dummy", [], abstract_ui)

			if cmd_name ~ "type_check" then 
				 if TRUE then 
					 create {ETF_TYPE_CHECK} Result.make ("type_check", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "evaluate" then 
				 if TRUE then 
					 create {ETF_EVALUATE} Result.make ("evaluate", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "reset" then 
				 if TRUE then 
					 create {ETF_RESET} Result.make ("reset", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_boolean_constant" then 
				 if attached {ETF_BOOL_ARG} args[1] as c and then TRUE then 
					 create {ETF_ADD_BOOLEAN_CONSTANT} Result.make ("add_boolean_constant", [c.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_integer_constant" then 
				 if attached {ETF_INT_ARG} args[1] as c and then TRUE then 
					 create {ETF_ADD_INTEGER_CONSTANT} Result.make ("add_integer_constant", [c.value], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_addition" then 
				 if TRUE then 
					 create {ETF_ADD_ADDITION} Result.make ("add_addition", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_subtraction" then 
				 if TRUE then 
					 create {ETF_ADD_SUBTRACTION} Result.make ("add_subtraction", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_multiplication" then 
				 if TRUE then 
					 create {ETF_ADD_MULTIPLICATION} Result.make ("add_multiplication", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_division" then 
				 if TRUE then 
					 create {ETF_ADD_DIVISION} Result.make ("add_division", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_conjunction" then 
				 if TRUE then 
					 create {ETF_ADD_CONJUNCTION} Result.make ("add_conjunction", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_disjunction" then 
				 if TRUE then 
					 create {ETF_ADD_DISJUNCTION} Result.make ("add_disjunction", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_implication" then 
				 if TRUE then 
					 create {ETF_ADD_IMPLICATION} Result.make ("add_implication", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_equality" then 
				 if TRUE then 
					 create {ETF_ADD_EQUALITY} Result.make ("add_equality", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_greater_than" then 
				 if TRUE then 
					 create {ETF_ADD_GREATER_THAN} Result.make ("add_greater_than", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_less_than" then 
				 if TRUE then 
					 create {ETF_ADD_LESS_THAN} Result.make ("add_less_than", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_union" then 
				 if TRUE then 
					 create {ETF_ADD_UNION} Result.make ("add_union", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_intersection" then 
				 if TRUE then 
					 create {ETF_ADD_INTERSECTION} Result.make ("add_intersection", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_difference" then 
				 if TRUE then 
					 create {ETF_ADD_DIFFERENCE} Result.make ("add_difference", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_negative" then 
				 if TRUE then 
					 create {ETF_ADD_NEGATIVE} Result.make ("add_negative", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_negation" then 
				 if TRUE then 
					 create {ETF_ADD_NEGATION} Result.make ("add_negation", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_sum" then 
				 if TRUE then 
					 create {ETF_ADD_SUM} Result.make ("add_sum", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_generalized_and" then 
				 if TRUE then 
					 create {ETF_ADD_GENERALIZED_AND} Result.make ("add_generalized_and", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "add_generalized_or" then 
				 if TRUE then 
					 create {ETF_ADD_GENERALIZED_OR} Result.make ("add_generalized_or", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "start_set_enumeration" then 
				 if TRUE then 
					 create {ETF_START_SET_ENUMERATION} Result.make ("start_set_enumeration", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 

			elseif cmd_name ~ "end_set_enumeration" then 
				 if TRUE then 
					 create {ETF_END_SET_ENUMERATION} Result.make ("end_set_enumeration", [], abstract_ui) 
				 else 
					 Result := dummy_cmd 
				 end 
			else 
				 Result := dummy_cmd 
			end 
		end

	find_invalid_evt_trace (
		event_trace: ARRAY[TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]])
	: STRING
	local
		loop_counter: INTEGER
		evt: TUPLE[name: STRING; args: ARRAY[ETF_EVT_ARG]]
		cmd_name: STRING
		args: ARRAY[ETF_EVT_ARG]
		evt_out_str: STRING
	do
		create Result.make_empty
		from
			loop_counter := event_trace.lower
		until
			loop_counter > event_trace.upper
		loop
			evt := event_trace[loop_counter]
			evt_out_str := etf_evt_out (evt)

			cmd_name := evt.name
			args := evt.args

			if cmd_name ~ "type_check" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"type_check")
				end

			elseif cmd_name ~ "evaluate" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"evaluate")
				end

			elseif cmd_name ~ "reset" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"reset")
				end

			elseif cmd_name ~ "add_boolean_constant" then 
				if NOT( ( args.count = 1 ) AND THEN attached {ETF_BOOL_ARG} args[1] as c and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_boolean_constant(c: BOOLEAN)")
				end

			elseif cmd_name ~ "add_integer_constant" then 
				if NOT( ( args.count = 1 ) AND THEN attached {ETF_INT_ARG} args[1] as c and then TRUE) then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_integer_constant(c: INTEGER)")
				end

			elseif cmd_name ~ "add_addition" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_addition")
				end

			elseif cmd_name ~ "add_subtraction" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_subtraction")
				end

			elseif cmd_name ~ "add_multiplication" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_multiplication")
				end

			elseif cmd_name ~ "add_division" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_division")
				end

			elseif cmd_name ~ "add_conjunction" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_conjunction")
				end

			elseif cmd_name ~ "add_disjunction" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_disjunction")
				end

			elseif cmd_name ~ "add_implication" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_implication")
				end

			elseif cmd_name ~ "add_equality" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_equality")
				end

			elseif cmd_name ~ "add_greater_than" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_greater_than")
				end

			elseif cmd_name ~ "add_less_than" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_less_than")
				end

			elseif cmd_name ~ "add_union" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_union")
				end

			elseif cmd_name ~ "add_intersection" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_intersection")
				end

			elseif cmd_name ~ "add_difference" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_difference")
				end

			elseif cmd_name ~ "add_negative" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_negative")
				end

			elseif cmd_name ~ "add_negation" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_negation")
				end

			elseif cmd_name ~ "add_sum" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_sum")
				end

			elseif cmd_name ~ "add_generalized_and" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_generalized_and")
				end

			elseif cmd_name ~ "add_generalized_or" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"add_generalized_or")
				end

			elseif cmd_name ~ "start_set_enumeration" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"start_set_enumeration")
				end

			elseif cmd_name ~ "end_set_enumeration" then 
				if FALSE then 
					if NOT Result.is_empty then
						Result.append ("%N")
					end
					Result.append (evt_out_str + " does not conform to declaration " +
							"end_set_enumeration")
				end
			else
				if NOT Result.is_empty then
					Result.append ("%N")
				end
				Result.append ("Error: unknown event name " + cmd_name)
			end
			loop_counter := loop_counter + 1
		end
	end
end